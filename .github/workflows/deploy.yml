name: 'Build and Deploy'

on:
  workflow_run:
    workflows: ['Terraform', 'Test', 'Build']
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - uses: actions/checkout@v4

    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Extract Project ID
      id: project
      run: |
        echo "PROJECT_ID=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.project_id')" >> $GITHUB_OUTPUT

    - name: Tag latest image
      run: |
        docker pull gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:${{ github.sha }}
        docker tag gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:${{ github.sha }} gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:latest
        docker push gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:latest

    # Check for pending migrations
    - name: Check for pending migrations
      id: check-migrations
      run: |
        # Use the image we just built to check migrations
        HAS_MIGRATIONS=$(docker run \
          -e DATABASE_URL="$(gcloud secrets versions access latest --secret='database-url')" \
          gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:${{ github.sha }} \
          poetry run alembic current 2>/dev/null | poetry run alembic heads 2>/dev/null | diff - - >/dev/null 2>&1; echo $?)
        
        echo "has_migrations=$HAS_MIGRATIONS" >> $GITHUB_OUTPUT

    # Only run migration steps if there are pending migrations
    - name: Stop Cloud Run service
      id: stop-service
      if: steps.check-migrations.outputs.has_migrations != '0'
      run: |
        # Store current revision name for rollback
        CURRENT_REVISION=$(gcloud run services describe nexari --region=us-central1 --format='value(status.latestReadyRevision)')
        echo "CURRENT_REVISION=$CURRENT_REVISION" >> $GITHUB_OUTPUT
        
        gcloud run services update nexari \
          --region=us-central1 \
          --no-traffic

    # Run database migrations with error handling
    - name: Run database migrations
      id: migrations
      if: steps.check-migrations.outputs.has_migrations != '0'
      continue-on-error: true
      run: |
        docker run \
          -e DATABASE_URL="$(gcloud secrets versions access latest --secret='database-url')" \
          gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:${{ github.sha }} \
          poetry run alembic upgrade head

    # Restore service if migrations failed
    - name: Restore service on migration failure
      if: steps.check-migrations.outputs.has_migrations != '0' && steps.migrations.outcome == 'failure'
      run: |
        echo "Database migrations failed. Restoring previous service version..."
        gcloud run services update-traffic nexari \
          --region=us-central1 \
          --to-revisions=${{ steps.stop-service.outputs.CURRENT_REVISION }}=100
        exit 1

    # Only deploy if migrations succeeded
    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: nexari
        image: gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:${{ github.sha }}
        region: us-central1
