name: CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.ref == 'refs/heads/main' && github.event_name == 'push' ||
      github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Extract Project ID and Service Account
        id: project
        run: |
          echo "PROJECT_ID=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.project_id')" >> $GITHUB_OUTPUT
          echo "SERVICE_ACCOUNT=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.client_email')" >> $GITHUB_OUTPUT

      - name: Terraform Plan
        env:
          TF_VAR_project_id: ${{ steps.project.outputs.PROJECT_ID }}
          TF_VAR_ci_service_account: ${{ steps.project.outputs.SERVICE_ACCOUNT }}
          TF_VAR_discord_token: ${{ secrets.DISCORD_TOKEN }}
          TF_VAR_discord_client_id: ${{ secrets.DISCORD_CLIENT_ID }}
        run: terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && !failure()
        env:
          TF_VAR_project_id: ${{ steps.project.outputs.PROJECT_ID }}
          TF_VAR_ci_service_account: ${{ steps.project.outputs.SERVICE_ACCOUNT }}
          TF_VAR_discord_token: ${{ secrets.DISCORD_TOKEN }}
          TF_VAR_discord_client_id: ${{ secrets.DISCORD_CLIENT_ID }}
        run: terraform apply -auto-approve

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Extract Project ID
        id: project
        run: |
          echo "PROJECT_ID=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.project_id')" >> $GITHUB_OUTPUT

      - name: Build and Push Docker images
        run: |
          # Build and push production image
          docker build --target production -t gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:${{ github.sha }} .
          docker push gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:${{ github.sha }}

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run tests with coverage
        run: |
          docker compose up --exit-code-from tests tests
        env:
          PYTEST_ADDOPTS: "--cov=src --cov-report=term-missing --cov-report=html"

      - name: Copy coverage from container
        run: |
          container_id=$(docker ps -aq -f name=tests)
          docker cp $container_id:/app/htmlcov ./htmlcov

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 14

  deploy:
    needs: [ test, terraform, build ]
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      (needs.terraform.result == 'success' || needs.terraform.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Extract Project ID
        id: project
        run: |
          echo "PROJECT_ID=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.project_id')" >> $GITHUB_OUTPUT

      - name: Check for pending migrations
        id: check-migrations
        run: |
          HAS_MIGRATIONS=$(docker run \
            -e DATABASE_URL="$(gcloud secrets versions access latest --secret='database-url')" \
            gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:${{ github.sha }} \
            poetry run alembic current 2>/dev/null | poetry run alembic heads 2>/dev/null | diff - - >/dev/null 2>&1; echo $?)
          echo "has_migrations=$HAS_MIGRATIONS" >> $GITHUB_OUTPUT

      - name: Stop bot service for migrations
        id: stop-service
        if: steps.check-migrations.outputs.has_migrations != '0'
        run: |
          gcloud compute ssh nexari --zone=us-central1-c --command='sudo systemctl stop discord-bot.service'

      - name: Run database migrations
        id: migrations
        if: steps.check-migrations.outputs.has_migrations != '0'
        continue-on-error: true
        run: |
          docker run \
            -e DATABASE_URL="$(gcloud secrets versions access latest --secret='database-url')" \
            gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:${{ github.sha }} \
            poetry run alembic upgrade head

      - name: Restart bot service after failed migrations
        if: steps.check-migrations.outputs.has_migrations != '0' && steps.migrations.outcome == 'failure'
        run: |
          echo "Database migrations failed. Restarting service with previous version..."
          gcloud compute ssh nexari --zone=us-central1-c --command='sudo systemctl start discord-bot.service'
          exit 1

      - name: Deploy to GCE instance
        id: deploy
        continue-on-error: true
        run: |
          # Store current tag from secret for potential rollback
          CURRENT_TAG=$(gcloud secrets versions access latest --secret=active-container-tag)
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          
          # Update the active tag secret
          echo "${{ github.sha }}" | gcloud secrets versions add active-container-tag --data-file=-
          
          # Just restart the service - it will pull the latest image
          gcloud compute ssh nexari --zone=us-central1-c --command='sudo systemctl restart discord-bot.service'
          
          # Wait and check if service is healthy
          sleep 30
          if ! gcloud compute ssh nexari --zone=us-central1-c --command='systemctl is-active discord-bot.service'; then
            echo "::error::Service failed to start properly"
            exit 1
          fi

      - name: Rollback on failure
        if: steps.deploy.outcome == 'failure'
        run: |
          echo "Deployment failed. Rolling back to previous version..."
          PREVIOUS_TAG="${{ steps.deploy.outputs.current_tag }}"
          if [ -n "$PREVIOUS_TAG" ]; then
            # Restore previous tag in secret
            echo "$PREVIOUS_TAG" | gcloud secrets versions add active-container-tag --data-file=-
            
            # Restart service to pick up old tag
            gcloud compute ssh nexari --zone=us-central1-c --command='sudo systemctl restart discord-bot.service'
            echo "Rolled back to $PREVIOUS_TAG"
          else
            echo "No previous tag found to roll back to"
          fi
          exit 1

      - name: Tag and push latest on success
        if: steps.deploy.outcome == 'success'
        run: |
          docker pull gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:${{ github.sha }}
          docker tag gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:${{ github.sha }} gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:latest
          docker push gcr.io/${{ steps.project.outputs.PROJECT_ID }}/nexari:latest
          echo "Deployment successful!"
