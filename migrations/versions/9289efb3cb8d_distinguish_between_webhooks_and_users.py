"""Distinguish between webhooks and users

Revision ID: 9289efb3cb8d
Revises: b83f39732e94
Create Date: 2024-09-26 12:19:07.398683

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.exc import IntegrityError


# revision identifiers, used by Alembic.
revision: str = "9289efb3cb8d"
down_revision: Union[str, None] = "b83f39732e94"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "channel",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.BigInteger(),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "channel",
        "guild_id",
        existing_type=sa.INTEGER(),
        type_=sa.BigInteger(),
        existing_nullable=False,
    )
    op.alter_column(
        "channel",
        "last_responder_id",
        existing_type=sa.INTEGER(),
        type_=sa.BigInteger(),
        existing_nullable=True,
    )
    op.alter_column(
        "guild",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.BigInteger(),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "llm",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.BigInteger(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "llm",
        "guild_id",
        existing_type=sa.INTEGER(),
        type_=sa.BigInteger(),
        existing_nullable=False,
    )
    op.add_column("message", sa.Column("user_id", sa.BigInteger(), nullable=True))
    op.add_column("message", sa.Column("webhook_id", sa.BigInteger(), nullable=True))
    
    # Transition existing values from author_id to user_id or webhook_id
    connection = op.get_bind()
    message_table = sa.Table('message', sa.MetaData(), autoload_with=connection)
    user_table = sa.Table('user', sa.MetaData(), autoload_with=connection)
    webhook_table = sa.Table('webhook', sa.MetaData(), autoload_with=connection)

    for message in connection.execute(message_table.select()):
        author_id = message.author_id
        user = connection.execute(user_table.select().where(user_table.c.id == author_id)).first()
        webhook = connection.execute(webhook_table.select().where(webhook_table.c.id == author_id)).first()

        if user:
            connection.execute(message_table.update().where(message_table.c.id == message.id).values(user_id=author_id))
        elif webhook:
            connection.execute(message_table.update().where(message_table.c.id == message.id).values(webhook_id=author_id))
        else:
            raise IntegrityError("Author ID not found in user or webhook table", params={}, orig=None)

    op.drop_constraint(None, "message", type_="foreignkey")
    op.create_foreign_key(None, "message", "webhook", ["webhook_id"], ["id"])
    op.create_foreign_key(None, "message", "user", ["user_id"], ["id"])
    op.drop_column("message", "author_id")
    op.alter_column(
        "user",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.BigInteger(),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "webhook",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.BigInteger(),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "webhook",
        "channel_id",
        existing_type=sa.INTEGER(),
        type_=sa.BigInteger(),
        existing_nullable=False,
    )
    op.alter_column(
        "webhook",
        "llm_id",
        existing_type=sa.INTEGER(),
        type_=sa.BigInteger(),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "webhook",
        "llm_id",
        existing_type=sa.BigInteger(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "webhook",
        "channel_id",
        existing_type=sa.BigInteger(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "webhook",
        "id",
        existing_type=sa.BigInteger(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "user",
        "id",
        existing_type=sa.BigInteger(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        autoincrement=False,
    )
    op.add_column("message", sa.Column("author_id", sa.BIGINT(), nullable=False))
    op.drop_constraint(None, "message", type_="foreignkey")
    op.drop_constraint(None, "message", type_="foreignkey")
    op.create_foreign_key(None, "message", "user", ["author_id"], ["id"])
    op.drop_column("message", "webhook_id")
    op.drop_column("message", "user_id")
    op.alter_column(
        "llm",
        "guild_id",
        existing_type=sa.BigInteger(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "llm",
        "id",
        existing_type=sa.BigInteger(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "guild",
        "id",
        existing_type=sa.BigInteger(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "channel",
        "last_responder_id",
        existing_type=sa.BigInteger(),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    op.alter_column(
        "channel",
        "guild_id",
        existing_type=sa.BigInteger(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "channel",
        "id",
        existing_type=sa.BigInteger(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        autoincrement=False,
    )
    # ### end Alembic commands ###
